services:
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs
    ports:
      - "443:443"
    networks:
      app_net:
    depends_on:
      - backend
      - frontend
    extra_hosts:
      - "cfwebapp.local:host-gateway"
      - "wilton.cfwebapp.local:host-gateway"
      - "admin.cfwebapp.local:host-gateway"
      - "demo.cfwebapp.local:host-gateway"

  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      FLASK_APP: ${FLASK_APP}
      FLASK_ENV: ${FLASK_ENV}
      FLASK_DEBUG: ${FLASK_DEBUG}
      DATABASE_URL: ${DATABASE_URL}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_COGNITO_REGION: ${AWS_COGNITO_REGION}
      AWS_COGNITO_USER_POOL_ID: ${AWS_COGNITO_USER_POOL_ID}
      AWS_COGNITO_CLIENT_ID: ${AWS_COGNITO_CLIENT_ID}
      AWS_COGNITO_CLIENT_SECRET: ${AWS_COGNITO_CLIENT_SECRET}
      COGNITO_DOMAIN: ${COGNITO_DOMAIN}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_SES_REGION: ${AWS_SES_REGION}
      AWS_SES_SENDER: ${AWS_SES_SENDER}
      BASE_DOMAIN: ${BASE_DOMAIN:-cfwebapp.local}     
      SESSION_COOKIE_DOMAIN: ".cfwebapp.local"
      REMEMBER_COOKIE_DOMAIN: ".cfwebapp.local"
      OAUTHLIB_INSECURE_TRANSPORT: "1"  # Allow insecure transport for local dev
    extra_hosts:
      - "cfwebapp.local:host-gateway"
      - "wilton.cfwebapp.local:host-gateway"
      - "admin.cfwebapp.local:host-gateway"
      - "demo.cfwebapp.local:host-gateway"
    volumes:
      - .:/app
      - dist-volume:/app/app/static/dist
      - ./certs:/app/certs:ro
    networks:
      app_net:
    command: gunicorn --workers 4 --reload --bind 0.0.0.0:5000 wsgi:app

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - VITE_API_URL=https://wilton.cfwebapp.local
    volumes:
      - ./client:/app
      - dist-volume:/app/app/static/dist
      - /app/node_modules
    networks:
      app_net:
    command: >
      sh -c "
        mkdir -p /app/dist &&
        npm run build &&
        npm run dev -- --host
      "

volumes:
  dist-volume:

networks:
  app_net:
    driver: bridge