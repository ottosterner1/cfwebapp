"""adding organisation features

Revision ID: e17312a92b88
Revises: 4e63b5f595c7
Create Date: 2025-06-17 07:28:09.961299

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, DateTime

# revision identifiers, used by Alembic.
revision = 'e17312a92b88'
down_revision = '4e63b5f595c7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # 1. Create organisation table
    op.create_table('organisation',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=100), nullable=False),
        sa.Column('slug', sa.String(length=50), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('slug')
    )

    # 2. Add organisation_id column as NULLABLE first
    with op.batch_alter_table('tennis_club', schema=None) as batch_op:
        batch_op.add_column(sa.Column('organisation_id', sa.Integer(), nullable=True))

    # 3. Create table references for data manipulation
    organisation_table = table('organisation',
        column('id', Integer),
        column('name', String),
        column('slug', String)
    )
    
    tennis_club_table = table('tennis_club',
        column('id', Integer),
        column('name', String),
        column('subdomain', String),
        column('organisation_id', Integer)
    )

    # 4. Get connection to execute data operations
    connection = op.get_bind()
    
    # 5. Get existing clubs
    existing_clubs = connection.execute(
        sa.select(tennis_club_table.c.id, tennis_club_table.c.name, tennis_club_table.c.subdomain)
    ).fetchall()
    
    print(f"Found {len(existing_clubs)} existing clubs to migrate")
    
    # 6. Create organizations for existing clubs and link them
    for club in existing_clubs:
        club_id, club_name, club_subdomain = club
        
        # Create organization name and slug
        org_name = f"{club_name} Organisation"
        
        # Create slug from subdomain, cleaning it up
        import re
        base_slug = str(club_subdomain).lower().replace('.', '-').replace('_', '-')
        base_slug = re.sub(r'[^a-z0-9-]', '', base_slug)
        
        # Ensure slug is unique by checking existing ones
        org_slug = base_slug
        counter = 1
        while True:
            # Check if slug exists
            existing_slug = connection.execute(
                sa.select(organisation_table.c.id).where(organisation_table.c.slug == org_slug)
            ).fetchone()
            
            if not existing_slug:
                break
                
            org_slug = f"{base_slug}-{counter}"
            counter += 1
        
        # Insert organization
        result = connection.execute(
            organisation_table.insert().values(
                name=org_name,
                slug=org_slug
            )
        )
        
        # Get the inserted organization ID
        org_id = connection.execute(
            sa.select(organisation_table.c.id).where(organisation_table.c.slug == org_slug)
        ).scalar()
        
        # Update club with organization ID
        connection.execute(
            tennis_club_table.update()
            .where(tennis_club_table.c.id == club_id)
            .values(organisation_id=org_id)
        )
        
        print(f"Created organization '{org_name}' (slug: {org_slug}) for club '{club_name}'")

    # 7. Now make the column NOT NULL and add foreign key constraint
    with op.batch_alter_table('tennis_club', schema=None) as batch_op:
        batch_op.alter_column('organisation_id', nullable=False)
        batch_op.create_foreign_key('fk_tennis_club_organisation', 'organisation', ['organisation_id'], ['id'])

    # 8. Update report_template table to use organisation_id instead of tennis_club_id
    with op.batch_alter_table('report_template', schema=None) as batch_op:
        # Add organisation_id column
        batch_op.add_column(sa.Column('organisation_id', sa.Integer(), nullable=True))
    
    # 9. Migrate existing report templates
    report_template_table = table('report_template',
        column('id', Integer),
        column('tennis_club_id', Integer),
        column('organisation_id', Integer)
    )
    
    # Update report templates to use the organization of their club
    connection.execute(
        sa.text("""
            UPDATE report_template 
            SET organisation_id = (
                SELECT tc.organisation_id 
                FROM tennis_club tc 
                WHERE tc.id = report_template.tennis_club_id
            )
            WHERE organisation_id IS NULL
        """)
    )
    
    # 10. Make organisation_id NOT NULL and add foreign key
    with op.batch_alter_table('report_template', schema=None) as batch_op:
        batch_op.alter_column('organisation_id', nullable=False)
        batch_op.create_foreign_key('fk_report_template_organisation', 'organisation', ['organisation_id'], ['id'])
        # Remove the old tennis_club_id column and its foreign key
        batch_op.drop_constraint('report_template_tennis_club_id_fkey', type_='foreignkey')
        batch_op.drop_column('tennis_club_id')

    print("Migration completed successfully!")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Restore report_template structure
    with op.batch_alter_table('report_template', schema=None) as batch_op:
        batch_op.add_column(sa.Column('tennis_club_id', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_constraint('fk_report_template_organisation', type_='foreignkey')
        batch_op.create_foreign_key('report_template_tennis_club_id_fkey', 'tennis_club', ['tennis_club_id'], ['id'])
        batch_op.drop_column('organisation_id')

    # Remove organisation_id from tennis_club
    with op.batch_alter_table('tennis_club', schema=None) as batch_op:
        batch_op.drop_constraint('fk_tennis_club_organisation', type_='foreignkey')
        batch_op.drop_column('organisation_id')

    # Drop organisation table
    op.drop_table('organisation')
    # ### end Alembic commands ###